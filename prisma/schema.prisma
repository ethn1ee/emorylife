generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String   @id @default(cuid(2))
  title       String
  content     String
  category    String
  subcategory String
  attachments String[]
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author   User   @relation("PostCreatedBy", fields: [authorId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  authorId String @default("anonymous")

  comments Comment[] @relation("CommentBelongsTo")
  likes    Like[]    @relation("LikeBelongsTo")

  @@index([authorId, category, subcategory])
  @@map("post")
}

model Comment {
  id        String   @id @default(cuid(2))
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post     Post?    @relation("CommentBelongsTo", fields: [postId], references: [id], onDelete: Cascade)
  postId   String?
  parent   Comment? @relation("CommentBelongsTo", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?

  childs Comment[] @relation("CommentBelongsTo")

  author   User   @relation("CommentCreatedBy", fields: [authorId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  authorId String @default("anonymous")

  @@index([postId, parentId, authorId])
  @@map("comment")
}

model Like {
  id        String   @id @default(cuid(2))
  createdAt DateTime @default(now())

  post     Post   @relation("LikeBelongsTo", fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  author   User   @relation("LikeCreatedBy", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  @@index([postId, authorId])
  @@map("like")
}

model User {
  id                 String   @id @default(cuid(2))
  name               String
  email              String
  emailVerified      Boolean
  emoryEmail         String?
  emoryEmailVerified Boolean  @default(false)
  affiliation        String   @default("None")
  class              Int?
  image              String?
  createdAt          DateTime
  updatedAt          DateTime

  sessions Session[]
  accounts Account[]

  posts    Post[]    @relation("PostCreatedBy")
  comments Comment[] @relation("CommentCreatedBy")
  likes    Like[]    @relation("LikeCreatedBy")

  displayUsername String?

  @@unique([id])
  @@unique([email])
  @@index([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
